#pragma kernel BakeDepth
#pragma kernel BakeColor

uint2 MapDimensions;
float BaseDepth;

StructuredBuffer<uint> PositionBuffer;
StructuredBuffer<float2> DepthToColorMap;

Texture2D<float4> ColorSource;

RWTexture2D<float4> PositionTexture;
RWTexture2D<float4> ColorTexture;

[numthreads(8, 8, 1)]
void BakeDepth(uint3 id : SV_DispatchThreadID)
{
	uint i = id.x + id.y * MapDimensions.x;
	bool odd = i % 2 == 1;
	uint depth = PositionBuffer[floor(i * 0.5)];
	// unpack ushort from uint
	if (odd) {
		depth <<= 16;
	}
	depth >>= 16;
	float angle = 0.0;
	float3 ray = float3(((float)id.x - (MapDimensions.x * 0.5)) * 0.5, ((float)id.y - (MapDimensions.y * 0.5)) * -0.5, BaseDepth);
	ray *= depth / BaseDepth;

	PositionTexture[id.xy] = float4(ray * 0.001, 1.0);
}

[numthreads(8, 8, 1)]
void BakeColor(uint3 id : SV_DispatchThreadID) {
	uint i = id.x + id.y * MapDimensions.x;

	int2 coordinates = (int2)DepthToColorMap[i];
	float4 color = ColorSource.Load(int3(coordinates, 0));
	ColorTexture[id.xy] = color;
}